# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pcapgen', [dirname(__file__)])
        except ImportError:
            import _pcapgen
            return _pcapgen
        if fp is not None:
            try:
                _mod = imp.load_module('_pcapgen', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pcapgen = swig_import_helper()
    del swig_import_helper
else:
    import _pcapgen
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class TcpSocket(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpSocket, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpSocket, name)
    __repr__ = _swig_repr
    def close(self): return _pcapgen.TcpSocket_close(self)
    def send(self, *args): return _pcapgen.TcpSocket_send(self, *args)
    def __init__(self): 
        this = _pcapgen.new_TcpSocket()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcapgen.delete_TcpSocket
    __del__ = lambda self : None;
TcpSocket_swigregister = _pcapgen.TcpSocket_swigregister
TcpSocket_swigregister(TcpSocket)

class TcpSocketPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TcpSocketPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TcpSocketPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pcapgen.new_TcpSocketPair(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _pcapgen.TcpSocketPair_first_set
    __swig_getmethods__["first"] = _pcapgen.TcpSocketPair_first_get
    if _newclass:first = _swig_property(_pcapgen.TcpSocketPair_first_get, _pcapgen.TcpSocketPair_first_set)
    __swig_setmethods__["second"] = _pcapgen.TcpSocketPair_second_set
    __swig_getmethods__["second"] = _pcapgen.TcpSocketPair_second_get
    if _newclass:second = _swig_property(_pcapgen.TcpSocketPair_second_get, _pcapgen.TcpSocketPair_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _pcapgen.delete_TcpSocketPair
    __del__ = lambda self : None;
TcpSocketPair_swigregister = _pcapgen.TcpSocketPair_swigregister
TcpSocketPair_swigregister(TcpSocketPair)

class PcapGen(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PcapGen, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PcapGen, name)
    __repr__ = _swig_repr
    def close(self): return _pcapgen.PcapGen_close(self)
    def create_connection(self, *args): return _pcapgen.PcapGen_create_connection(self, *args)
    def __init__(self): 
        this = _pcapgen.new_PcapGen()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcapgen.delete_PcapGen
    __del__ = lambda self : None;
PcapGen_swigregister = _pcapgen.PcapGen_swigregister
PcapGen_swigregister(PcapGen)

class PcapGenPtr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PcapGenPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PcapGenPtr, name)
    __repr__ = _swig_repr
    def __deref__(self): return _pcapgen.PcapGenPtr___deref__(self)
    def __init__(self): 
        this = _pcapgen.new_PcapGenPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pcapgen.delete_PcapGenPtr
    __del__ = lambda self : None;
    def close(self): return _pcapgen.PcapGenPtr_close(self)
    def create_connection(self, *args): return _pcapgen.PcapGenPtr_create_connection(self, *args)
PcapGenPtr_swigregister = _pcapgen.PcapGenPtr_swigregister
PcapGenPtr_swigregister(PcapGenPtr)


def open(*args):
  return _pcapgen.open(*args)
open = _pcapgen.open
# This file is compatible with both classic and new-style classes.


